Dear Bruno,

we are pleased to inform you that your submission 

Skeptik [System Description]

to IJCAR 2014 has been accepted. Attached please find reviewer comments regarding your submission. We trust that you will find these comments 
useful and constructive.

Below you'll find the instructions for the camera-ready final version of your
IJCAR 2014 contribution. Please take them carefully into account when preparing
your camera-ready paper for the Springer proceedings. The final paper and the
signed copyright form are due on

 May 2, 2014.
             
This is a firm deadline for the production of the proceedings.

(1) Final paper:
================

Please submit the files belonging to your camera-ready paper using your
EasyChair author account. In order to upload your contribution to the
Proceedings, you need first to change role and choose "Proceedings
author" within EasyChair.
You need to upload two files:

  (a) a PDF version of your camera-ready paper (without page numbers)
      having at most 15 pages for full papers or 7 pages for system
     descriptions, respectively, in total; 

  (b) either a zipped file containing all your LaTeX sources
      or a Word file in the RTF format.

Please follow strictly the author instructions of Springer
when preparing the final version:

  http://www.springer.de/comp/lncs/authors.html

Once data processing is finished, Springer will contact all corresponding
authors and ask them to check their papers. We expect this to happen
shortly before the printing of the proceedings (end of May/June 2014). At
that time your quick interaction with Springer will be greatly
appreciated. The paper length will be checked, so please, do comply to
the page limit.

(2) Copyright form:
===================

Please upload a signed and completed copyright form within EasyChair
as soon as possible. The Springer LNCS copyright forms can be found at

ftp://ftp.springer.de/pub/tex/latex/llncs/LNCS-Springer_Copyright_Form.pdf 

When filling it, please enter for 
 Title of the Book or Conference Name: 
   7th International Joint Conference on Automated Reasoning (IJCAR 2014)
 Volume Editor(s): 
   Stephane Demri, Deepak Kapur, Christoph Weidenbach

It is sufficient for one of the authors to sign and submit the
completed copyright form. Please scan the signed completed copyright
form and submit it as a pdf-file. 

In the process of submitting the final version of your contribution
and the copyright form, you may receive further detailed information
by EasyChair (via email).

In case of any questions, please feel free to ask.

Thank you for submitting to IJCAR 2014.  We look forward to seeing you 
at the conference in Vienna.

best regards,
Christoph, Deepak and Stephane


----------------------- REVIEW 1 ---------------------
PAPER: 20
TITLE: Skeptik [System Description]
AUTHORS: Bruno Woltzenlogel Paleo, Joseph Boudou and Andreas Fellner

OVERALL EVALUATION: 1 (weak accept)
REVIEWER'S CONFIDENCE: 4 (high)

----------- REVIEW -----------
Skeptik is designed as a generic platform for experimenting with proof transformation algorithms. It currently implements a number of compression algorithms for SAT and (the propositional structure of) SMT proofs, but the authors indicate that the overall design is sufficiently general for accommodating first-order proofs. The introduction also talks about models generated by solvers, but this aspect is not taken up later in the paper.

I believe that the approach is quite original, and that such a tool can be of good use to researchers in automated deduction. The authors mention several compression algorithms that have been implemented, and although no detailed information is given, the claim appears to be that implementation of new algorithms should be easy. Skeptik is written in Scala, and the authors warn against inefficiencies and in particular memory overhead, but I presume that the convenience of a high-level language outweighs the lack of efficiency for experimentation with proof transformation algorithms.

The paper is easy to read. However, I have two gripes with the presentation. First, I would have expected the concepts and algorithms to be presented before the installation and usage of the tool. Second, as the main value of Skeptik is as a testbed for implementing new transformation algorithms, the explanation of the algorithms implemented by the authors appears to be less important than a presentation of the platform itself and of how a new algorithm would be implemented in it. Some quantitative information (say, the lines of code necessary to hack a new combination of existing algorithms or to implement a "simple" transformation algorithm, or even some performance figures that the authors seem to have) would also have been welcome.

A few detailed comments:

- Please consider adding a subtitle or changing the title so that the reader gets a rough impression of what Skeptik is.

- I find your conventions for capitalization a little strange. In particular, I would capitalize SAT and SMT, and everywhere write Java and Scala rather than java and scala.

- Section 3: Could you give a short explanation of what eq_diamond9.smt proves, and how the transformation compresses it?

- p.3, par.2: It is not clear what "correctness conditions" you refer to.

- p.5, par. LUVRPI: What is a "non-sequential combination of LUV after RPI"? Your sentence appears to contain an order.

- ref.[5]: wrong abbreviation of the name of the third author of this paper


----------------------- REVIEW 2 ---------------------
PAPER: 20
TITLE: Skeptik [System Description]
AUTHORS: Bruno Woltzenlogel Paleo, Joseph Boudou and Andreas Fellner

OVERALL EVALUATION: 0 (borderline paper)
REVIEWER'S CONFIDENCE: 4 (high)

----------- REVIEW -----------
This system description describes Skeptik, a tool for compressing proofs in various formats.  Internally, the tool is implemented in Scala, and represents proofs as simply typed lambda expressions.  A proof calculus is represented as a collection of inference rules.  Some implementation details are given for the tool, as well as descriptions of the formats and options supported by the tool. Some future directions are mentioned, including adding additional support for non-propositional proofs.

The paper gives a nice overview of various compression techniques and how they can be implemented efficiently.  However, in my opinion, not enough motivation is given for why proof compression is important, only one sentence in the introduction mentions this.  Are there any existing applications where proof compression is critical to its success?  It would help to elaborate on this more.  Also, the paper does not give many details on if/how proof compression algorithms affect trustworthiness of the outputted proof, and whether Skeptik contributes to the trusted computing base.  In other words, it is important Skeptik should output a well-formed proof if and only if the inputted proof is well-formed, and moreover the proofs should prove the same statement.  How is this property ensured?  I believe this issue is somewhat alluded to at the end of Section 4, but the explanation is rather vague.

The paper would be stronger if the authors added additional comments on how the tool is intended to be used in applications. Maybe a few small examples/anecdotes would help. A more precise description of the core functionality and implementation of the tool (Section 4) would help as well (what are transformations? what is a well-formed proof?), or some note on how non-propositional inferences are represented. I did not get a clear picture of these from the text.


----------------------- REVIEW 3 ---------------------
PAPER: 20
TITLE: Skeptik [System Description]
AUTHORS: Bruno Woltzenlogel Paleo, Joseph Boudou and Andreas Fellner

OVERALL EVALUATION: 2 (accept)
REVIEWER'S CONFIDENCE: 3 (medium)

----------- REVIEW -----------
This is a system description of Skeptik, a tool for checking,
compressing/manipulating proofs in both SAT and SMT, supporting many
formats and most proof-compressing and manipulating algorithms in the
literature. The paper provides usage and implementation details. 

There is not much to say here.  The tool presented is an interesting
and potentially very useful one, to the best of my knowledge it
implements most state-of-the art proof compression algorithms. Overall,
I think this is a tool which definitely deserves being presented at
IJCAR.


One possible limitation of this tool is that, as I understand from the
paper, Skeptik can be interfaced only by file exchange. If so, I
suggest that providing an API would greatly increase the usability of
the tool.

Interesting future expansions could be to provide minimum/minimal
unsat-cores and interpolants.

I have only two criticisms, which can be easily addressed in the final version:

* The paper should report the kind of licence regulating its usage.

* In the introduction, I'd also mention that resolution proof production
 is an essential step in producing unsatisfiable cores and interpolants.